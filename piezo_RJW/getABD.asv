function    [A, B, D] = getlayup(layup,Qelastic,Qpiezo,zn,piezoconfig)

%   [A, B, D, Ex] = getlayup(layup,Qelastic,Qpiezo)
%
%       Returns the laminate matrices for a given layup with
%       plys oriented with the angles in the vector
%       laminate.
%
%           inputs:
%       layup       -   (n-m) X 1 vector of ply angles
%       Qelastic    -   elastic layer constants
%       Qpiezo      -   piezo layer constants
%       zn          -   n X 3 matrix of thickenesses
%       piezoconfig -   1 for unimorph, 0 for bimorph
%
%           outputs:
%       A,B,D       -   laminate matrices
%

nelasticlayers = length(layup);
npiezolayers = size(zn,1) - nelasticlayers;

A = zeros(3,3);
B = zeros(3,3);
D = zeros(3,3);

% if the actuator is a bimorph...
if piezoconfig,
    % include piezo layer first...
    A = A + Qpiezo*zn(1,1);
	B = B + Qpiezo*zn(1,2);
    D = D + Qpiezo*zn(1,3);
end

% ... then all other layers
for m = 1:nelasticlayers,
    angle = layup(m)*pi/180;  % ply angle
    Qbarelastic = trotate(Qelastic,angle);
    
    A = A + Qbarelastic*zn(m+piezoconfig,1);
    B = B + Qbarelastic*zn(m+piezoconfig,2);
    D = D + Qbarelastic*zn(m+piezoconfig,3);
end

% if this is a bimorph, then add the top piezo layer...
if piezoconfig,
    A = A + Qpiezo*zn(size(zn,1),1);
    B = B + Qpiezo*zn(size(zn,1),2);
    D = D + Qpiezo*zn(size(zn,1),3);
else 
    % otherwise add as many top layer piezos as difference
    for n = nelasticlayers+1:nelasticlayers+npiezolayers,
        A = A + Qpiezo*zn(n,1);
        B = B + Qpiezo*zn(n,2);
        D = D + Qpiezo*zn(n,3);
    end
end

B = B/2;
D = D/3;